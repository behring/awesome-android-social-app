apply plugin: 'com.android.application'
apply plugin: 'jacoco'
apply plugin: 'checkstyle'
apply plugin: 'findbugs'

android {
    compileSdkVersion 28
    defaultConfig {
        applicationId "com.thoughtworks.awesomesocialapp"
        minSdkVersion 19
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    signingConfigs {
        release {
            storeFile file("../app.keystore")
            storePassword "123456"
            keyAlias "app"
            keyPassword "123456"
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            buildConfigField "String", "BASE_URL", '"http://0.0.0.0:5000/"'
            signingConfig signingConfigs.release
        }

        debug {
            testCoverageEnabled true
            buildConfigField "String", "BASE_URL", '"http://10.0.2.2:5000/"'
        }

        ci {
            testCoverageEnabled true
            buildConfigField "String", "BASE_URL", '"http://jenkins:5000/"'
            signingConfig signingConfigs.release
        }
    }

    testBuildType "ci"

    testOptions {
        unitTests {
            includeAndroidResources = true
        }
    }

    dataBinding {
        enabled = true
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    tasks.withType(Test) {
        jacoco.includeNoLocationClasses = true
    }
}

task jacocoTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest', 'createDebugCoverageReport']) {

    reports {
        xml.enabled = true
        html.enabled = true
    }

    def fileFilter = ['**/R.class',
                      '**/R$*.class',
                      '**/BuildConfig.*',
                      '**/Manifest*.*',
                      '**/*Test*.*',
                      '**/*BR*.*',
                      '**/DataBinderMapperImpl*.*',
                      '**/android/*',
                      '**/com/thoughtworks/awesomesocialapp/databinding/*',
                      '**/com/thoughtworks/awesomesocialapp/DataBindingInfo.*']
    def mainSrc = "${project.projectDir}/src/main/java"
    def debugTree = fileTree(dir: "${buildDir}/intermediates/javac/debug", excludes: fileFilter)

    sourceDirectories = files([mainSrc])
    classDirectories = files([debugTree])

    executionData = fileTree(dir: "$buildDir", includes: [
            "jacoco/testDebugUnitTest.exec",
            "outputs/code_coverage/debugAndroidTest/connected/*coverage.ec"
    ])
}

task checkstyle(type: Checkstyle) {
    description = "Check Java style with Checkstyle"
    configFile = rootProject.file("config/checkstyle/sun_checks.xml")
    source = 'src/main/java'
    classpath = files()
    ignoreFailures = true

    reports {
        xml.enabled false
        html.enabled true
        html.stylesheet resources.text.fromFile('../config/checkstyle/xsl/checkstyle-frames.xsl')
    }
}

task findbugs(type: FindBugs, dependsOn: ['assemble']) {
    ignoreFailures = false
    effort = "max"
    reportLevel = "low"
    classes = files("$project.buildDir/intermediates/javac/debug")
    excludeFilter = file("$rootProject.rootDir/config/findbugs/findbugs-exclude.xml")

    source = fileTree('src/main/java/')
    classpath = files()

    reports {
        xml.enabled = false
        xml.withMessages = true
        html.enabled = !xml.isEnabled()
        xml.destination "$project.buildDir/reports/findbugs/findbugs-output.xml"
        html.destination "$project.buildDir/reports/findbugs/findbugs-output.html"
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:appcompat-v7:28.0.0'
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    implementation 'android.arch.lifecycle:extensions:1.1.1'
    implementation 'com.squareup.retrofit2:retrofit:2.5.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.4.0'
    implementation 'io.reactivex.rxjava2:rxjava:2.2.3'
    implementation 'io.reactivex.rxjava2:rxandroid:2.1.0'
    implementation "com.jakewharton.timber:timber:4.7.1"

    androidTestImplementation 'androidx.test.ext:junit:1.1.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.1'
    androidTestImplementation 'androidx.test:runner:1.1.1'
    androidTestImplementation 'androidx.test:rules:1.1.1'
    androidTestImplementation "org.mockito:mockito-android:2.24.0"

    testImplementation 'junit:junit:4.12'
    testImplementation 'com.android.support.test:runner:1.0.2'
    testImplementation 'androidx.test:core:1.1.0'

    testImplementation 'org.robolectric:robolectric:4.1'
    testImplementation "org.robolectric:shadows-supportv4:3.8"
    testImplementation 'org.robolectric:shadows-httpclient:3.0'
    testImplementation "org.mockito:mockito-core:2.24.0"
}
